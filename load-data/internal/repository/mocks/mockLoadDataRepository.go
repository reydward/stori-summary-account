// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/loadDataRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "load-data/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoadDataRepository is a mock of LoadDataRepository interface.
type MockLoadDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoadDataRepositoryMockRecorder
}

// MockLoadDataRepositoryMockRecorder is the mock recorder for MockLoadDataRepository.
type MockLoadDataRepositoryMockRecorder struct {
	mock *MockLoadDataRepository
}

// NewMockLoadDataRepository creates a new mock instance.
func NewMockLoadDataRepository(ctrl *gomock.Controller) *MockLoadDataRepository {
	mock := &MockLoadDataRepository{ctrl: ctrl}
	mock.recorder = &MockLoadDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadDataRepository) EXPECT() *MockLoadDataRepositoryMockRecorder {
	return m.recorder
}

// InsertTransaction mocks base method.
func (m *MockLoadDataRepository) InsertTransaction(transaction model.Transaction) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", transaction)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockLoadDataRepositoryMockRecorder) InsertTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockLoadDataRepository)(nil).InsertTransaction), transaction)
}
